#!/usr/bin/env perl

# Copyright 2024 SUHYEON CHOI
# 
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, 
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

use warnings;
use strict;
use 5.010;

use Getopt::Long qw/:config no_ignore_case no_auto_abbrev/;
use List::Util qw/all/;
use YAML qw/LoadFile/;
use File::Spec;
use Pod::Usage;
use FindBin;

# Global Constants
my %interp_set     = map { $_ => $_ } qw/bash zsh sh csh ksh tcsh perl ruby python python3/;
my %extensions     = qw/sh bash pl perl rb ruby py python3/;
my $default_interp = 'bash';

my $opts_file_name = 'tscr_opts.yml';
my $pod_file_name  = 'tscr.pod';
my $opts_file_path = File::Spec->catfile($FindBin::RealBin, $opts_file_name);
my $pod_file_path  = File::Spec->catfile($FindBin::RealBin, $pod_file_name);

die "there is no file '$opts_file_name'\n" unless -s -f -r $opts_file_path;
die "there is no file '$pod_file_name'\n" unless -s -f -r $pod_file_path;

my %options      = %{LoadFile $opts_file_path};
my %option_names = map { $_ => $_ } keys %options;

# Main
my %argv_parsed                        = &parse_arguments();
my ($forced, $given_interp, $opts_ref) = @argv_parsed{qw/forced input_interp options/};

for (@ARGV) {
	if (-e) {
		unless ($forced) {
			warn "$_ : already exists and contains content\n";
			next;
		}

		unless (-w _) {
			warn "$_ : lacks write permission\n";
			next;
		}
	}

    my $interp = &decide_interp(&extract_extension($_), $given_interp);

    unless (defined $interp) {
        warn "unsupported extension is found at $_\n";
        next;
    }

    open FILE, '>', $_ or die "failed to open the file $_ ($!)\n";

    print FILE "#!/usr/bin/env $interp\n\n";
	print FILE &get_str_for_opt($interp, $opts_ref);

    close FILE;

	chmod 0775, $_;
}

# Subroutines
sub parse_arguments {
	my %result        = (input_interp => undef, forced => 0);
	my @counts        = (0, 0);
	my @options       = ();
    my $getopt_result = GetOptions 
		'o|options=s'     => \@options,
        'i|interpreter=s' => sub { $counts[0]++; $result{input_interp} = $_[1] },
		'f|forced'        => sub { $counts[1]++; $result{forced} = 1 },
        'v|version'       => sub { pod2usage(-verbose => 99, -sections => 'NAME|VERSION', -exitval => 0, -input => $pod_file_path) },
        'h|help'          => sub { pod2usage(-verbose => 1, -input => $pod_file_path) },
        'm|man'           => sub { pod2usage(-verbose => 2, -input => $pod_file_path) };

	$result{options} = { map { $_ => $_ } split /,/, join ',', @options };

	pod2usage(-verbose => 99, -sections => 'NAME|VERSION|SYNOPSIS', -exitval => 0, -input => $pod_file_path) if @ARGV == 0;
    die "An error occurred while parsing arguments\n" unless $getopt_result;
    die "illegal options provided\n" unless all { $_ == 0 || $_ == 1 } @counts;
    die "unsupported interpreter provided\n" if $counts[0] == 1 && ! exists $interp_set{$result{input_interp}};    
	die "unsupported options provided\n" unless all { exists $option_names{$_} } keys %{$result{options}};

	%result
}

sub extract_extension {
    $_[0] =~ /^.+\.([^.]+?)$/ ? $1 : undef
}

sub get_str_for_opt {
	my ($interp, $opts) = @_;

	while (my ($opt_name, $vals) = each %options) {
		if (exists $opts->{$opt_name} && grep { $_ eq $interp } @{$vals->{interp}}) {
			return $vals->{code} || '';
		}
	}

	''
}

sub decide_interp {
    my ($ext, $given_interp) = @_;

    if (defined $ext) {
        exists $extensions{$ext} ? $extensions{$ext} :
        defined $given_interp    ? $given_interp     :
        undef;
    }
    else {
        defined $given_interp ? $given_interp : $default_interp;
    }
}
